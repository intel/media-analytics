# Copyright (c) 2020 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# This file is automatically generated from .m4 template.
# To update, modify the template and regenerate.

ARG IMAGE=ubuntu:20.04
FROM $IMAGE AS base

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    curl ca-certificates gpg-agent software-properties-common && \
  rm -rf /var/lib/apt/lists/*

RUN curl -fsSL https://repositories.intel.com/graphics/intel-graphics.key | apt-key add -
RUN apt-add-repository "deb https://repositories.intel.com/graphics/ubuntu focal main"


FROM base as content

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates ffmpeg wget && \
  rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/downloads && cd /opt/downloads && \
  wget -O pexels-1388365.mp4 --progress=bar:force https://www.pexels.com/photo/1388365/download

RUN cd /opt/downloads && \
  ffmpeg -i pexels-1388365.mp4 -an -vcodec copy pexels-1388365.h264

RUN rm -rf /opt/downloads/*.mp4
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates git git-lfs && \
  rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/build && cd /opt/build && \
  git clone https://github.com/dlstreamer/pipeline-zoo-models.git && \
  cd pipeline-zoo-models && git checkout ca51c02

FROM base as build

RUN mkdir -p /opt/build && mkdir -p /opt/dist

ENV PKG_CONFIG_PATH=/opt/intel/samples/lib/pkgconfig
ENV CMAKE_PREFIX_PATH=/opt/intel/samples/lib/cmake

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    g++ \
    make \
    wget \
    cmake \
    pkg-config \
     && \
  rm -rf /var/lib/apt/lists/*
ARG OPENCV_REPO=https://github.com/opencv/opencv/archive/4.5.3.tar.gz
RUN cd /opt/build && \
  wget -O - ${OPENCV_REPO} | tar xz
# TODO: file a bug against opencv since they do not accept full libdir
RUN cd /opt/build/opencv-4.5.3 && mkdir build && cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DBUILD_DOCS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    -DWITH_OPENEXR=OFF \
    -DWITH_OPENJPEG=OFF \
    -DWITH_GSTREAMER=OFF \
    -DWITH_JASPER=OFF \
    .. && \
  make -j "$(nproc)" && \
  make install DESTDIR=/opt/dist && \
  make install

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    cmake \
    gcc \
    g++ \
    git \
    libboost-all-dev \
    libgtk2.0-dev \
    libgtk-3-dev \
    libtool \
    libusb-1.0-0-dev \
    make \
    patch \
    python \
    python-yaml \
    xz-utils \
    ocl-icd-opencl-dev \
    opencl-headers && \
  rm -rf /var/lib/apt/lists/*
ARG DLDT_REPO=https://github.com/openvinotoolkit/openvino.git

RUN git clone ${DLDT_REPO} /opt/build/openvino && \
  cd /opt/build/openvino && \
  git checkout 2022.1.0 && \
  git submodule update --init --recursive

RUN cd /opt/build/openvino && \
  mkdir build && cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples/dldt \
    -DENABLE_CPPLINT=OFF \
    -DENABLE_GNA=OFF \
    -DENABLE_VPU=OFF \
    -DENABLE_OPENCV=OFF \
    -DENABLE_MKL_DNN=OFF \
    -DENABLE_CLDNN=ON \
    -DENABLE_PYTHON=OFF \
    -DENABLE_SAMPLES=OFF \
    -DENABLE_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    -DTREAT_WARNING_AS_ERROR=ON \
    -DNGRAPH_WARNINGS_AS_ERRORS=ON \
    -DNGRAPH_COMPONENT_PREFIX=deployment_tools/ngraph/ \
    -DNGRAPH_UNIT_TEST_ENABLE=OFF \
    -DNGRAPH_TEST_UTIL_ENABLE=OFF \
    .. && \
  make -j $(nproc) && \
  make install && \
  make install DESTDIR=/opt/dist

ARG CUSTOM_DLDT_INSTALL_DIR=/opt/intel/samples/dldt
ARG CUSTOM_IE_DIR=${CUSTOM_DLDT_INSTALL_DIR}/runtime
ARG CUSTOM_IE_LIBDIR=${CUSTOM_IE_DIR}/lib/intel64
ENV CUSTOM_DLDT=${CUSTOM_IE_DIR}

ENV OpenVINO_DIR=${CUSTOM_IE_DIR}/cmake
ENV InferenceEngine_DIR=${CUSTOM_IE_DIR}/cmake
ENV TBB_DIR=${CUSTOM_IE_DIR}/3rdparty/tbb/cmake
ENV ngraph_DIR=${CUSTOM_IE_DIR}/cmake

# Remove stuff we don't need
RUN cd /opt/dist//opt/intel/samples/dldt && \
  rm -rf install_dependencies samples tools

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    cmake \
    g++ \
    libigfxcmrt-dev \
    libmfx-dev \
    libva-dev \
    make \
    ocl-icd-opencl-dev \
    opencl-headers \
    pkg-config && \
  rm -rf /var/lib/apt/lists/*
COPY va_sample /opt/build/va_sample
RUN cd /opt/build/va_sample \
  && mkdir build && cd build \
  && cmake \
    -DCMAKE_INSTALL_PREFIX=/opt/intel/samples \
    -DCMAKE_INSTALL_LIBDIR=/opt/intel/samples/lib \
    -DCMAKE_C_FLAGS="-Werror" \
    -DCMAKE_CXX_FLAGS="-Werror" \
    .. \
  && make VERBOSE=1 -j $(nproc --all) \
  && make install DESTDIR=/opt/dist

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    asciidoc-base \
    docbook-utils \
    docbook-xsl \
    make \
    xmlto \
    xsltproc && \
  rm -rf /var/lib/apt/lists/*
# Building some manual pages for the sample
COPY doc/man /opt/build/manuals
RUN cd /opt/build/manuals && make -j $(nproc --all) && \
  DESTDIR=/opt/dist make prefix=/opt/intel/samples install
RUN rm -rf /opt/build/manuals

RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    gcc \
    bison \
    flex \
    git \
    libcairo-dev \
    libdrm-dev \
    libdw-dev \
    libkmod-dev \
    libpciaccess-dev \
    libpixman-1-dev \
    libprocps-dev \
    libudev-dev \
    meson \
    pkg-config && \
  rm -rf /var/lib/apt/lists/*
ARG IGT_REPO=https://gitlab.freedesktop.org/drm/igt-gpu-tools.git
RUN git clone $IGT_REPO /opt/build/igt
RUN cd /opt/build/igt \
  && git checkout 1869d560c550ac273f495076ead46f8a337fc20b \
  && meson build \
  --buildtype=release \
  --prefix=/opt/intel/samples \
  --libdir=/opt/intel/samples/lib \
  -Ddocs=disabled -Dman=disabled -Dlibdrm_drivers=intel \
  -Doverlay=disabled -Drunner=disabled -Dtests=disabled \
  && ninja -j $(nproc --all) -C build \
  && DESTDIR=/opt/dist ninja -C build install \
  && ninja -C build install


RUN echo "Start cleanup" && \
    rm -rf /opt/dist//opt/intel/samples/include && \
    rm -rf /opt/dist//opt/intel/samples/share/doc && \
    rm -rf /opt/dist//opt/intel/samples/share/gtk-doc && \
    ( find /opt/dist -name "*.a" -exec rm -f {} \; ) && \
    echo "Cleanup done"

# Ok, here goes the final image end-user will actually see
FROM base

LABEL vendor="Intel Corporation"

COPY --from=content /opt/downloads /opt/data/embedded
COPY --from=content /opt/build/pipeline-zoo-models/storage/ssd_mobilenet_v1_coco_INT8 /opt/intel/samples/models/ssd_mobilenet_v1_coco_INT8
COPY --from=content /opt/build/pipeline-zoo-models/storage/resnet-50-tf_INT8 /opt/intel/samples/models/resnet-50-tf_INT8


RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libgtk-3-0 \
    ocl-icd-libopencl1 \
    intel-media-va-driver-non-free \
    intel-opencl-icd \
    libigfxcmrt7 \
    libmfx1 \
    libva-drm2 \
    less \
    man-db \
    clinfo \
    linux-tools-generic \
    pciutils \
    vainfo \
    curl \
    sudo \
    vim \
    wget && \
  rm -rf /var/lib/apt/lists/*

COPY --from=build /opt/dist /
RUN echo "/opt/intel/samples/lib" >> /etc/ld.so.conf.d/all-libs.conf && ldconfig

ARG CUSTOM_DLDT_INSTALL_DIR=/opt/intel/samples/dldt
ARG CUSTOM_IE_DIR=${CUSTOM_DLDT_INSTALL_DIR}/runtime
ARG CUSTOM_IE_LIBDIR=${CUSTOM_IE_DIR}/lib/intel64
RUN { \
   echo "${CUSTOM_IE_LIBDIR}"; \
   echo "${CUSTOM_IE_DIR}/3rdparty/tbb/lib"; \
} > /etc/ld.so.conf.d/dldt.conf
RUN ldconfig
# Restoring man which is excluded from the minimal ubuntu image
RUN rm -f /usr/bin/man && dpkg-divert --quiet --remove --rename /usr/bin/man
RUN setcap cap_sys_admin+ep $(find /opt -name intel_gpu_top)
# perf is tight to particular kernel version per old WA which will never
# be fixed, we just need to use some version
RUN ln -fs $(find /usr/lib/linux-tools -name perf) /usr/bin/perf;

# Granting CAP_SYS_ADMIN to the Linux perf to be able to get global perf
# events (specifically: i915 events). Mind that this will work if container
# is started with:
#   --cap-add SYS_ADMIN --security-opt="no-new-privileges:false"
# If it was started with
#   --cap-add SYS_ADMIN --security-opt="no-new-privileges:true"
# then you need to adjust /proc/sys/kernel/perf_event_paranoid on a host to have
# value <=0
RUN setcap cap_sys_admin+ep $(readlink -f $(which perf))
#RUN setcap cap_sys_admin+ep $(readlink -f $(which intel_gpu_top))

# Installing entrypoint helper scripts
COPY assets/demo-alive /usr/bin/
COPY assets/demo-bash /usr/bin/
COPY assets/hello-bash /usr/bin/
COPY assets/demo-setup /opt/intel/samples/bin
COPY assets/info /opt/intel/samples/bin
COPY assets/setup-apt-proxy /opt/intel/samples/bin

RUN { \
  echo "export DEMO_PREFIX=/opt/intel/samples"; \
  echo "export DEMO_MODELS=\$DEMO_PREFIX/models"; \
  echo "export MANPATH=\$DEMO_PREFIX/share/man:\$MANPATH"; \
  echo "export PATH=\$DEMO_PREFIX/bin:\$PATH"; \
  echo "export PYTHONUSERBASE=\$DEMO_PREFIX"; \
  echo "export LIBVA_DRIVER_NAME=iHD"; \
  echo "export DEVICE=\${DEVICE:-/dev/dri/renderD128}"; \
} > /etc/demo.env

# Create default container user <user>
RUN groupadd -r user && useradd -lrm -s /bin/bash -g user user
RUN usermod -aG sudo user
RUN sed -i -e "s/%sudo.*/%sudo ALL=(ALL) NOPASSWD:ALL/g" /etc/sudoers

# Creating locations sample will need and giving permissions
# to the default user
RUN mkdir -p /opt/data/content
RUN mkdir -p /opt/data/artifacts && chown user /opt/data/artifacts

# Setting up environment common for all samples

# Declaring volumes which you might wish to optionally mount
#  * /opt/data/content is where you can put your own content to access from inside
#    the sample demos
#  * /opt/data/artifacts is a location where sample will produce some output
#    artifacts like generated or captured stream and logs. You can wish to twick
#    this location to get artifacts on your host system
#  * /var/www/hls is a location where sample demos will generate HLS streams. You
#    might wish to twick this location to get access to these streams. Mind that
#    this is server side raw HLS stream. If you run some demo client to capture
#    streaming video - look in the /opt/data/artifacts

VOLUME /opt/data/content
VOLUME /opt/data/artifacts

# Check running container healthy status with:
#  docker inspect --format="{{json .State.Health}}" <container-id>
HEALTHCHECK CMD /usr/bin/demo-alive

# hello-bash is a default command which will be executed by demo-bash if
# user did not provide any arguments starting the container. Basically hello-bash
# will print welcome message and enter regular bash with correct environment.
CMD ["/usr/bin/hello-bash"]

# demo-bash will execute whatever command is provided by the user making
# sure that environment settings are correct.
ENTRYPOINT ["/usr/bin/demo-bash"]

USER user
WORKDIR /home/user

